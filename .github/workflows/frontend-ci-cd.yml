name: Daeng-ggu 프론트엔드 배포 자동화 워크 플로우

on:
  push:
    branches: ['main', 'dev']

permissions:
  checks: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      owner: ${{ steps.filter.outputs.owner }}
      designer: ${{ steps.filter.outputs.designer }}
      guardian: ${{ steps.filter.outputs.guardian }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get previous tag
        id: previoustag
        run: echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ --always)" >> $GITHUB_ENV
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ env.PREVIOUS_TAG }}
          ref: ${{ github.ref }}
          filters: |
            owner:
              - apps/owner/**
            designer:
              - apps/designer/**
            guardian:
              - apps/guardian/**
            all:
              - apps/**
      - name: Print filter outputs
        run: |
          echo "Owner changed: ${{ steps.filter.outputs.owner }}"
          echo "Designer changed: ${{ steps.filter.outputs.designer }}"
          echo "Guardian changed: ${{ steps.filter.outputs.guardian }}"
      - name: Stop Workflow if No Changes
        if: ${{ steps.filter.outputs.owner == 'false' && steps.filter.outputs.designer == 'false' && steps.filter.outputs.guardian == 'false' }}
        run: |
          echo "No changes detected in owner, designer, or guardian. Stopping workflow."
          exit 0

  frontend-build:
    needs: detect-changes
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Print filter outputs
        run: |
          echo "Owner changed: ${{ steps.filter.outputs.owner }}"
          echo "Designer changed: ${{ steps.filter.outputs.designer }}"
          echo "Guardian changed: ${{ steps.filter.outputs.guardian }}"

      - name: 댕꾸의 코드 가져오기
        uses: actions/checkout@v4

      - name: Enable Corepack for Yarn
        run: corepack enable

      - name: Ensure the required Yarn version
        run: corepack prepare yarn@4.5.3 --activate

      - name: 노드 버전 설정
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      # Owner 프로젝트 처리
      - name: 의존성 캐시 확인 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        uses: actions/cache@v4
        with:
          path: apps/owner/node_modules
          key: ${{ runner.os }}-owner-${{ hashFiles('/yarn.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-owner-

      - name: 의존성 설치 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        run: |
          cd apps/owner
          yarn install --immutable

      - name: 환경 변수 설정 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        run: |
          cd apps/owner
          echo "VITE_CLIENT_ID=${{ secrets.VITE_OWNER_CLIENT_ID }}" > .env
          echo "VITE_KAKAO_REDIRECT_URI=${{ secrets.VITE_OWNER_KAKAO_REDIRECT_URI }}" >> .env
          echo "VITE_SERVER_API=${{ secrets.VITE_OWNER_SERVER_API }}" >> .env
          echo "VITE_TOSS_CLIENT_KEY=${{ secrets.VITE_OWNER_TOSS_CLIENT_KEY }}" >> .env

      - name: 프론트엔드 빌드 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        run: |
          cd apps/owner
          yarn build

      - name: 빌드 파일 아티팩트로 저장 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-owner
          path: apps/owner/dist

      # Designer 프로젝트 처리
      - name: 의존성 캐시 확인 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        uses: actions/cache@v4
        with:
          path: apps/designer/node_modules
          key: ${{ runner.os }}-designer-${{ hashFiles('/yarn.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-designer-

      - name: 의존성 설치 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        run: |
          cd apps/designer
          yarn install --immutable

      - name: 환경 변수 설정 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        run: |
          cd apps/designer
          echo "VITE_CLIENT_ID=${{ secrets.VITE_DESIGNER_CLIENT_ID }}" > .env
          echo "VITE_KAKAO_REDIRECT_URI=${{ secrets.VITE_DESIGNER_KAKAO_REDIRECT_URI }}" >> .env
          echo "VITE_SERVER_API=${{ secrets.VITE_DESIGNER_SERVER_API }}" >> .env
          echo "VITE_TOSS_CLIENT_KEY=${{ secrets.VITE_DESIGNER_TOSS_CLIENT_KEY }}" >> .env

      - name: 프론트엔드 빌드 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        run: |
          cd apps/designer
          yarn build

      - name: 빌드 파일 아티팩트로 저장 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-designer
          path: apps/designer/dist

      # Guardian 프로젝트 처리
      - name: 의존성 캐시 확인 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        uses: actions/cache@v4
        with:
          path: apps/guardian/node_modules
          key: ${{ runner.os }}-guardian-${{ hashFiles('/yarn.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-guardian-

      - name: 의존성 설치 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        run: |
          cd apps/guardian
          yarn install --immutable

      - name: 환경 변수 설정 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        run: |
          cd apps/guardian
          echo "VITE_CLIENT_ID=${{ secrets.VITE_GUARDIAN_CLIENT_ID }}" > .env
          echo "VITE_KAKAO_REDIRECT_URI=${{ secrets.VITE_GUARDIAN_KAKAO_REDIRECT_URI }}" >> .env
          echo "VITE_SERVER_API=${{ secrets.VITE_GUARDIAN_SERVER_API }}" >> .env
          echo "VITE_TOSS_CLIENT_KEY=${{ secrets.VITE_GUARDIAN_TOSS_CLIENT_KEY }}" >> .env

      - name: 프론트엔드 빌드 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        run: |
          cd apps/guardian
          yarn build

      - name: 빌드 파일 아티팩트로 저장 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-guardian
          path: apps/guardian/dist

  frontend-deploy:
    needs: [frontend-build, detect-changes]
    runs-on: ubuntu-latest
    steps:
      - name: Determine Deployment Environment
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "S3_OWNER=${{ secrets.OWNER_S3_BUCKET_MAIN }}" >> $GITHUB_ENV
            echo "S3_DESIGNER=${{ secrets.DESIGNER_S3_BUCKET_MAIN }}" >> $GITHUB_ENV
            echo "S3_GUARDIAN=${{ secrets.GUARDIAN_S3_BUCKET_MAIN }}" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "S3_OWNER=${{ secrets.OWNER_S3_BUCKET_DEV }}" >> $GITHUB_ENV
            echo "S3_DESIGNER=${{ secrets.DESIGNER_S3_BUCKET_DEV }}" >> $GITHUB_ENV
            echo "S3_GUARDIAN=${{ secrets.GUARDIAN_S3_BUCKET_DEV }}" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_DEV }}" >> $GITHUB_ENV
          fi
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Owner 프로젝트 배포
      - name: 빌드 파일 다운로드 (Owner)
        if: needs.detect-changes.outputs.owner == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-owner
          path: dist/owner

      - name: Deploy Owner to S3
        if: needs.detect-changes.outputs.owner == 'true'
        run: |
          aws s3 sync dist/owner s3://$S3_OWNER --delete

      # Designer 프로젝트 배포
      - name: 빌드 파일 다운로드 (Designer)
        if: needs.detect-changes.outputs.designer == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-designer
          path: dist/designer

      - name: Deploy Designer to S3
        if: needs.detect-changes.outputs.designer == 'true'
        run: |
          aws s3 sync dist/designer s3://$S3_DESIGNER/designer --delete

      # Guardian 프로젝트 배포
      - name: 빌드 파일 다운로드 (Guardian)
        if: needs.detect-changes.outputs.guardian == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-guardian
          path: dist/guardian

      - name: Deploy Guardian to S3
        if: needs.detect-changes.outputs.guardian == 'true'
        run: |
          aws s3 sync dist/guardian s3://$S3_GUARDIAN/guardian --delete

      # CloudFront 무효화
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
